// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DIDCoreSDK
import CryptoKit
@_exported import DIDCoreSDK
import DIDDataModelSDK
import DIDUtilitySDK
import Foundation
import LocalAuthentication
import Security
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ClaimInfo {
  public var credentialId: Swift.String
  public var claimCodes: [Swift.String]
  public init(credentialId: Swift.String, claimCodes: [Swift.String])
}
public struct PresentationInfo {
  public var holder: Swift.String
  public var validFrom: Swift.String
  public var validUntil: Swift.String
  public var verifierNonce: Swift.String
  public init(holder: Swift.String, validFrom: Swift.String, validUntil: Swift.String, verifierNonce: Swift.String)
}
public struct WalletKeyGenRequest : DIDCoreSDK.WalletKeyGenRequestProtocol {
  public var algorithmType: DIDDataModelSDK.AlgorithmType
  public var id: Swift.String
  public var accessMethod: DIDCoreSDK.WalletAccessMethod
  public let storage: DIDCoreSDK.StorageOption
  public init(algorithmType: DIDDataModelSDK.AlgorithmType, id: Swift.String, methodType: DIDCoreSDK.WalletAccessMethod)
}
public struct SecureKeyGenRequest : DIDCoreSDK.SecureKeyGenRequestProtocol {
  public let algorithmType: DIDDataModelSDK.AlgorithmType
  public var id: Swift.String
  public var accessMethod: DIDCoreSDK.SecureEnclaveAccessMethod
  public let storage: DIDCoreSDK.StorageOption
  public var prompt: Swift.String
  public init(id: Swift.String, accessMethod: DIDCoreSDK.SecureEnclaveAccessMethod, prompt: Swift.String)
}
public struct KeyInfo {
  public var algorithmType: DIDDataModelSDK.AlgorithmType
  public var id: Swift.String
  public var accessMethod: DIDCoreSDK.KeyAccessMethod
  public var authType: DIDDataModelSDK.AuthType
  public var publicKey: Swift.String
}
extension DIDCoreSDK.KeyInfo : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct KeyManager {
  public init(fileName: Swift.String) throws
  public var isAnyKeysSaved: Swift.Bool {
    get
  }
  public func isKeySaved(id: Swift.String) throws -> Swift.Bool
  public func generateKey(keyGenRequest: any DIDCoreSDK.KeyGenRequestProtocol) throws
  public func changePin(id: Swift.String, oldPin: Foundation.Data, newPin: Foundation.Data) throws
  @discardableResult
  public func getKeyInfos(keyType: DIDDataModelSDK.VerifyAuthType) throws -> [DIDCoreSDK.KeyInfo]
  @discardableResult
  public func getKeyInfos(ids: [Swift.String]) throws -> [DIDCoreSDK.KeyInfo]
  public func deleteKeys(ids: [Swift.String]) throws
  public func deleteAllKeys() throws
  public func sign(id: Swift.String, pin: Foundation.Data? = nil, digest: Foundation.Data) throws -> Foundation.Data
  public func verify(algorithmType: DIDDataModelSDK.AlgorithmType, publicKey: Foundation.Data, digest: Foundation.Data, signature: Foundation.Data) throws -> Swift.Bool
}
public struct SecureEncryptor {
  public static func encrypt(plainData: Foundation.Data) throws -> Foundation.Data
  public static func decrypt(cipherData: Foundation.Data) throws -> Foundation.Data
}
public struct DIDManager {
  public static func genDID(methodName: Swift.String) throws -> Swift.String
  public var isSaved: Swift.Bool {
    get
  }
  public init(fileName: Swift.String) throws
  public mutating func createDocument(did: Swift.String, keyInfos: [DIDCoreSDK.DIDKeyInfo], controller: Swift.String?, service: [DIDDataModelSDK.DIDDocument.Service]?) throws
  public func getDocument() throws -> DIDDataModelSDK.DIDDocument
  public mutating func replaceDocument(didDocument: DIDDataModelSDK.DIDDocument, needUpdate: Swift.Bool)
  public mutating func saveDocument() throws
  public mutating func deleteDocument() throws
  public mutating func addVerificationMethod(keyInfo: DIDCoreSDK.DIDKeyInfo) throws
  public mutating func removeVerificationMethod(keyId: Swift.String) throws
  public mutating func addService(service: DIDDataModelSDK.DIDDocument.Service) throws
  public mutating func removeService(serviceId: Swift.String) throws
  public mutating func resetChanges() throws
}
public enum WalletAccessMethod {
  case none
  case pin(value: Foundation.Data)
}
public enum SecureEnclaveAccessMethod : Swift.Int, Swift.Codable {
  case none
  case currentSet
  case any
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum StorageOption : Swift.Int, Swift.Codable {
  case wallet
  case secureEnclave
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum KeyAccessMethod : Swift.Int, Swift.Codable {
  case walletNone
  case walletPin
  case secureEnclaveNone
  case secureEnclaveCurrentSet
  case secureEnclaveAny
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.Date {
  public static func getUTC0Date(seconds: Swift.UInt) -> Swift.String
}
public protocol KeyGenRequestProtocol {
  var algorithmType: DIDDataModelSDK.AlgorithmType { get }
  var id: Swift.String { get }
  var storage: DIDCoreSDK.StorageOption { get }
}
public protocol WalletKeyGenRequestProtocol : DIDCoreSDK.KeyGenRequestProtocol {
  var accessMethod: DIDCoreSDK.WalletAccessMethod { get }
}
public protocol SecureKeyGenRequestProtocol : DIDCoreSDK.KeyGenRequestProtocol {
  var accessMethod: DIDCoreSDK.SecureEnclaveAccessMethod { get }
  var prompt: Swift.String { get }
}
public struct DIDKeyInfo {
  public var keyInfo: DIDCoreSDK.KeyInfo
  public var methodType: DIDCoreSDK.DIDMethodType
  public var controller: Swift.String?
  public init(keyInfo: DIDCoreSDK.KeyInfo, methodType: DIDCoreSDK.DIDMethodType, controller: Swift.String? = nil)
}
public struct DIDMethodType : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let assertionMethod: DIDCoreSDK.DIDMethodType
  public static let authentication: DIDCoreSDK.DIDMethodType
  public static let keyAgreement: DIDCoreSDK.DIDMethodType
  public static let capabilityInvocation: DIDCoreSDK.DIDMethodType
  public static let capabilityDelegation: DIDCoreSDK.DIDMethodType
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = DIDCoreSDK.DIDMethodType
  public typealias Element = DIDCoreSDK.DIDMethodType
  public typealias RawValue = Swift.Int
}
public struct WalletCoreError : Swift.Error {
  public let code: Swift.String
  public let message: Swift.String
}
public struct VCManager {
  public var isAnyCredentialsSaved: Swift.Bool {
    get
  }
  public init(fileName: Swift.String) throws
  public func addCredential(credential: DIDDataModelSDK.VerifiableCredential) throws
  public func getCredentials(by identifiers: [Swift.String]) throws -> [DIDDataModelSDK.VerifiableCredential]
  public func getAllCredentials() throws -> [DIDDataModelSDK.VerifiableCredential]
  public func deleteCredentials(by identifiers: [Swift.String]) throws
  public func deleteAllCredentials() throws
  public func makePresentation(claimInfos: [DIDCoreSDK.ClaimInfo], presentationInfo: DIDCoreSDK.PresentationInfo) throws -> DIDDataModelSDK.VerifiablePresentation
}
extension DIDCoreSDK.SecureEnclaveAccessMethod : Swift.Equatable {}
extension DIDCoreSDK.SecureEnclaveAccessMethod : Swift.Hashable {}
extension DIDCoreSDK.SecureEnclaveAccessMethod : Swift.RawRepresentable {}
extension DIDCoreSDK.StorageOption : Swift.Equatable {}
extension DIDCoreSDK.StorageOption : Swift.Hashable {}
extension DIDCoreSDK.StorageOption : Swift.RawRepresentable {}
extension DIDCoreSDK.KeyAccessMethod : Swift.Equatable {}
extension DIDCoreSDK.KeyAccessMethod : Swift.Hashable {}
extension DIDCoreSDK.KeyAccessMethod : Swift.RawRepresentable {}
