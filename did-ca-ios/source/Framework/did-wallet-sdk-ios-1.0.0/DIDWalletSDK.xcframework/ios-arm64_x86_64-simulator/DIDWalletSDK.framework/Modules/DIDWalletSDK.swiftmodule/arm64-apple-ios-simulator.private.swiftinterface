// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DIDWalletSDK
import CommonCrypto
import CoreData
import CryptoKit
import DIDCommunicationSDK
import DIDCoreSDK
import DIDDataModelSDK
import DIDUtilitySDK
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class KeyChainWrapper {
  public init()
  public func saveKeyChain(passcode: Swift.String) throws -> Foundation.Data
  public func matching(passcode: Swift.String, finalEncCek: Foundation.Data) throws -> Foundation.Data?
  @objc deinit
}
public protocol WalletLockManagerImpl {
  func registerLock(hWalletToken: Swift.String, passcode: Swift.String, isLock: Swift.Bool) throws -> Swift.Bool
  func isRegLock() throws -> Swift.Bool
  func authenticateLock(passcode: Swift.String) throws -> Foundation.Data?
}
public protocol WalletTokenImpl {
  func verifyWalletToken(hWalletToken: Swift.String, purposes: [DIDDataModelSDK.WalletTokenPurposeEnum]) throws
  func createWalletTokenSeed(purpose: DIDDataModelSDK.WalletTokenPurposeEnum, pkgName: Swift.String, userId: Swift.String?) throws -> DIDDataModelSDK.WalletTokenSeed
  #if compiler(>=5.3) && $AsyncAwait
  func createNonceForWalletToken(walletTokenData: DIDDataModelSDK.WalletTokenData?, APIGatewayURL: Swift.String) async throws -> Swift.String
  #endif
}
public protocol WalletCoreImpl {
  func isSavedKey(keyId: Swift.String) throws -> Swift.Bool
  func deleteWallet() throws -> Swift.Bool
  func saveDidDocument(type: DIDDataModelSDK.DidDocumentType) throws
  func isExistWallet() throws -> Swift.Bool
  func generateKey(passcode: Swift.String?, keyId: Swift.String, algType: DIDDataModelSDK.AlgorithmType) throws
  func sign(keyId: Swift.String, pin: Foundation.Data?, data: Foundation.Data, type: DIDDataModelSDK.DidDocumentType) throws -> Foundation.Data
  func createDeviceDidDocument() throws -> DIDDataModelSDK.DIDDocument
  func createHolderDidDocument() throws -> DIDDataModelSDK.DIDDocument
  func getDidDocument(type: DIDDataModelSDK.DidDocumentType) throws -> DIDDataModelSDK.DIDDocument
  func verify(publicKey: Foundation.Data, data: Foundation.Data, signature: Foundation.Data) throws -> Swift.Bool
  func addCredential(credential: DIDDataModelSDK.VerifiableCredential) throws -> Swift.Bool
  func deleteCredential(ids: [Swift.String]) throws -> Swift.Bool
  func getCredential(ids: [Swift.String]) throws -> [DIDDataModelSDK.VerifiableCredential]
  func getAllCredentials() throws -> [DIDDataModelSDK.VerifiableCredential]
  func isAnyCredentialsSaved() -> Swift.Bool
  func makePresentation(claimInfos: [DIDCoreSDK.ClaimInfo], presentationInfo: DIDCoreSDK.PresentationInfo) throws -> DIDDataModelSDK.VerifiablePresentation
  func getKeyInfos(keyType: DIDDataModelSDK.VerifyAuthType) throws -> [DIDCoreSDK.KeyInfo]
  func getKeyInfos(ids: [Swift.String]) throws -> [DIDCoreSDK.KeyInfo]
  func isAnyKeysSaved() throws -> Swift.Bool
}
public protocol WalletServiceImpl {
  func deleteWallet() throws -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  func createWallet(tasURL: Swift.String, walletURL: Swift.String) async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func requestVp(hWalletToken: Swift.String, claimInfos: [DIDCoreSDK.ClaimInfo]?, verifierProfile: DIDDataModelSDK._RequestProfile?, APIGatewayURL: Swift.String, passcode: Swift.String?) async throws -> (DIDDataModelSDK.AccE2e, Foundation.Data)
  #endif
  func createSignedDIDDoc(passcode: Swift.String?) throws -> DIDDataModelSDK.SignedDIDDoc
  func createProofs(ownerDidDoc: DIDDataModelSDK.DIDDocument?, proofPurpose: Swift.String) throws -> Foundation.Data
  func createDeviceDocument() throws -> DIDDataModelSDK.DIDDocument
  #if compiler(>=5.3) && $AsyncAwait
  func requestRegisterWallet(tasURL: Swift.String, walletURL: Swift.String, ownerDidDoc: DIDDataModelSDK.DIDDocument?) async throws -> Swift.Bool
  #endif
  func bindUser() throws -> Swift.Bool
  func unbindUser() throws -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  func requestRegisterUser(tasURL: Swift.String, txId: Swift.String, serverToken: Swift.String, signedDIDDoc: DIDDataModelSDK.SignedDIDDoc?) async throws -> DIDDataModelSDK._RequestRegisterUser
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func requestRestoreUser(tasURL: Swift.String, txId: Swift.String, serverToken: Swift.String, didAuth: DIDDataModelSDK.DIDAuth?) async throws -> DIDDataModelSDK._RequestRestoreDidDoc
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func requestUpdateUser(tasURL: Swift.String, txId: Swift.String, serverToken: Swift.String, didAuth: DIDDataModelSDK.DIDAuth?, signedDIDDoc: DIDDataModelSDK.SignedDIDDoc?) async throws -> DIDDataModelSDK._RequestUpdateDidDoc
  #endif
  func getSignedDidAuth(authNonce: Swift.String, passcode: Swift.String?) throws -> DIDDataModelSDK.DIDAuth
  #if compiler(>=5.3) && $AsyncAwait
  func requestIssueVc(tasURL: Swift.String, didAuth: DIDDataModelSDK.DIDAuth?, issuerProfile: DIDDataModelSDK._RequestIssueProfile?, refId: Swift.String, serverToken: Swift.String, APIGatewayURL: Swift.String) async throws -> (Swift.String, DIDDataModelSDK._RequestIssueVc?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func requestRevokeVc(tasURL: Swift.String, authType: DIDDataModelSDK.VerifyAuthType, vcId: Swift.String, issuerNonce: Swift.String, txId: Swift.String, serverToken: Swift.String, passcode: Swift.String?) async throws -> DIDDataModelSDK._RequestRevokeVc
  #endif
  func getSignedWalletInfo() throws -> DIDDataModelSDK.SignedWalletInfo
}
public enum WalletLogLevel : Swift.String {
  case verbose
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class WalletLogger {
  public static let shared: DIDWalletSDK.WalletLogger
  public func setEnable(_ onOff: Swift.Bool)
  public func setLogLevel(_ level: DIDWalletSDK.WalletLogLevel)
  public func debug(_ message: Swift.String, function: Swift.String = #function)
  public func info(_ message: Swift.String, function: Swift.String = #function)
  public func warning(_ message: Swift.String, function: Swift.String = #function)
  public func verbose(_ message: Swift.String, function: Swift.String = #function)
  public func error(_ message: Swift.String, function: Swift.String = #function)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Properties {
  public static func getWalletId() -> Swift.String?
  public static func setWalletId(id: Swift.String)
  @objc deinit
}
public struct WalletSDKError : Swift.Error {
  public var code: Swift.String
  public var message: Swift.String
}
@_hasMissingDesignatedInitializers public class WalletAPI {
  public static let shared: DIDWalletSDK.WalletAPI
  public func isExistWallet() throws -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func createWallet(tasURL: Swift.String, walletURL: Swift.String) async throws -> Swift.Bool
  #endif
  @discardableResult
  public func deleteWallet() throws -> Swift.Bool
  @discardableResult
  public func createWalletTokenSeed(purpose: DIDDataModelSDK.WalletTokenPurposeEnum, pkgName: Swift.String, userId: Swift.String) throws -> DIDDataModelSDK.WalletTokenSeed
  #if compiler(>=5.3) && $AsyncAwait
  public func createNonceForWalletToken(walletTokenData: DIDDataModelSDK.WalletTokenData, APIGatewayURL: Swift.String) async throws -> Swift.String
  #endif
  @discardableResult
  public func bindUser(hWalletToken: Swift.String) throws -> Swift.Bool
  @discardableResult
  public func unbindUser(hWalletToken: Swift.String) throws -> Swift.Bool
  public func registerLock(hWalletToken: Swift.String, passcode: Swift.String, isLock: Swift.Bool) throws -> Swift.Bool
  public func authenticateLock(passcode: Swift.String) throws -> Foundation.Data?
  #if compiler(>=5.3) && $AsyncAwait
  public func createEncVp(hWalletToken: Swift.String, claimInfos: [DIDCoreSDK.ClaimInfo]? = nil, verifierProfile: DIDDataModelSDK._RequestProfile, APIGatewayURL: Swift.String, passcode: Swift.String? = nil) async throws -> (DIDDataModelSDK.AccE2e, Foundation.Data)
  #endif
  public func isLock() throws -> Swift.Bool
  public func createSignedDIDDoc(passcode: Swift.String? = nil) throws -> DIDDataModelSDK.SignedDIDDoc
  #if compiler(>=5.3) && $AsyncAwait
  public func requestRegisterUser(tasURL: Swift.String, txId: Swift.String, hWalletToken: Swift.String, serverToken: Swift.String, signedDIDDoc: DIDDataModelSDK.SignedDIDDoc) async throws -> DIDDataModelSDK._RequestRegisterUser
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func requestRestoreUser(tasURL: Swift.String, txId: Swift.String, hWalletToken: Swift.String, serverToken: Swift.String, didAuth: DIDDataModelSDK.DIDAuth?) async throws -> DIDDataModelSDK._RequestRestoreDidDoc
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func requestUpdateUser(tasURL: Swift.String, txId: Swift.String, hWalletToken: Swift.String, serverToken: Swift.String, didAuth: DIDDataModelSDK.DIDAuth?, signedDIDDoc: DIDDataModelSDK.SignedDIDDoc?) async throws -> DIDDataModelSDK._RequestUpdateDidDoc
  #endif
  public func getSignedDidAuth(authNonce: Swift.String, passcode: Swift.String? = nil) throws -> DIDDataModelSDK.DIDAuth?
  #if compiler(>=5.3) && $AsyncAwait
  public func requestIssueVc(tasURL: Swift.String, hWalletToken: Swift.String, didAuth: DIDDataModelSDK.DIDAuth, issuerProfile: DIDDataModelSDK._RequestIssueProfile, refId: Swift.String, serverToken: Swift.String, APIGatewayURL: Swift.String) async throws -> (Swift.String, DIDDataModelSDK._RequestIssueVc?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func requestRevokeVc(hWalletToken: Swift.String, tasURL: Swift.String, authType: DIDDataModelSDK.VerifyAuthType, vcId: Swift.String, issuerNonce: Swift.String, txId: Swift.String, serverToken: Swift.String, passcode: Swift.String? = nil) async throws -> DIDDataModelSDK._RequestRevokeVc
  #endif
  public func getSignedWalletInfo() throws -> DIDDataModelSDK.SignedWalletInfo
  @objc deinit
}
extension DIDWalletSDK.WalletAPI {
  @discardableResult
  public func createHolderDIDDocument(hWalletToken: Swift.String) throws -> DIDDataModelSDK.DIDDocument?
  public func getDidDocument(type: DIDDataModelSDK.DidDocumentType) throws -> DIDDataModelSDK.DIDDocument
  @discardableResult
  public func generateKeyPair(hWalletToken: Swift.String, passcode: Swift.String? = nil, keyId: Swift.String, algType: DIDDataModelSDK.AlgorithmType, promptMsg: Swift.String? = nil) throws -> Swift.Bool
  @discardableResult
  public func sign(keyId: Swift.String, pin: Foundation.Data? = nil, data: Foundation.Data, type: DIDDataModelSDK.DidDocumentType) throws -> Foundation.Data
  public func createVp(hWalletToken: Swift.String, claimInfos: [DIDCoreSDK.ClaimInfo], presentationInfo: DIDCoreSDK.PresentationInfo) throws -> DIDDataModelSDK.VerifiablePresentation
  public func verify(publicKey: Foundation.Data, data: Foundation.Data, signature: Foundation.Data) throws -> Swift.Bool
  public func deleteCredentials(hWalletToken: Swift.String, ids: [Swift.String]) throws -> Swift.Bool
  public func getCredentials(hWalletToken: Swift.String, ids: [Swift.String]) throws -> [DIDDataModelSDK.VerifiableCredential]
  public func getAllCrentials(hWalletToken: Swift.String) throws -> [DIDDataModelSDK.VerifiableCredential]?
  public func getKeyInfos(keyType: DIDDataModelSDK.VerifyAuthType) throws -> [DIDCoreSDK.KeyInfo]
  public func getKeyInfos(ids: [Swift.String]) throws -> [DIDCoreSDK.KeyInfo]
  public func isAnyKeysSaved() throws -> Swift.Bool
}
public class WalletUtil {
  public init()
  public static func generateMessageID() -> Swift.String
  public static func mergeNonce(clientNonce: Foundation.Data?, serverNonce: Foundation.Data?) throws -> Foundation.Data
  public static func mergeSharedSecretAndNonce(sharedSecret: Foundation.Data, nonce: Foundation.Data, symmetricCipherType: DIDUtilitySDK.SymmetricCipherType) -> Foundation.Data
  public static func splitData(data: Foundation.Data) -> (Foundation.Data, Foundation.Data)?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DateUtil {
  public static func checkDate(targetDateStr: Swift.String) throws -> Swift.Bool
  @objc deinit
}
extension Foundation.Data {
  public func sha256() -> Swift.String
}
extension Swift.String {
  public func sha256() -> Swift.String
  public func base64() -> Swift.String
}
public typealias DataModelable = DIDWalletSDK.Jsonable & DIDWalletSDK.Loopable
public protocol Loopable : Swift.Hashable {
  var allProperties: [Swift.String : Any] { get }
  override static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
extension DIDWalletSDK.Loopable {
  public var allProperties: [Swift.String : Any] {
    get
  }
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol Jsonable : Swift.Decodable, Swift.Encodable {
  init(from jsonData: Foundation.Data) throws
  init(from jsonString: Swift.String) throws
  func toJsonData(isPretty: Swift.Bool) throws -> Foundation.Data
  func toJson(isPretty: Swift.Bool) throws -> Swift.String
}
extension DIDWalletSDK.Jsonable {
  public init(from jsonData: Foundation.Data) throws
  public init(from jsonString: Swift.String) throws
  public func toJsonData(isPretty: Swift.Bool = false) throws -> Foundation.Data
  public func toJson(isPretty: Swift.Bool = false) throws -> Swift.String
}
@_inheritsConvenienceInitializers @objc(CaEntity) public class CaEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DIDWalletSDK.CaEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DIDWalletSDK.CaEntity>
  @objc @NSManaged dynamic public var createDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var idx: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pkgName: Swift.String? {
    @objc get
    @objc set
  }
}
extension DIDWalletSDK.CaEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(TokenEntity) public class TokenEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DIDWalletSDK.TokenEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DIDWalletSDK.TokenEntity>
  @objc @NSManaged dynamic public var createDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hWalletToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var idx: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nonce: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pii: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pkgName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var purpose: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var validUntil: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var walletId: Swift.String? {
    @objc get
    @objc set
  }
}
extension DIDWalletSDK.TokenEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(UserEntity) public class UserEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DIDWalletSDK.UserEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DIDWalletSDK.UserEntity>
  @objc @NSManaged dynamic public var createDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var finalEncKey: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var idx: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pii: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updateDate: Swift.String? {
    @objc get
    @objc set
  }
}
extension DIDWalletSDK.UserEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension DIDWalletSDK.WalletLogLevel : Swift.Equatable {}
extension DIDWalletSDK.WalletLogLevel : Swift.Hashable {}
extension DIDWalletSDK.WalletLogLevel : Swift.RawRepresentable {}
